/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Generated from: unibo_mavlink.xml

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;

    
using System.Reflection;    
    
[assembly: AssemblyTitle("Mavlink Classes")]
[assembly: AssemblyDescription("Generated Message Classes for Mavlink. See http://qgroundcontrol.org/mavlink/start")]
[assembly: AssemblyProduct("Mavlink")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

    namespace MavLink
{

	/// <summary>
	/// Micro air vehicle / autopilot classes. This identifies the individual model.
	/// </summary>
	public enum MAV_AUTOPILOT : ushort
	{

		/// <summary>
		/// Generic autopilot, full support for everything
		/// </summary>
		MAV_AUTOPILOT_GENERIC = 0,

		/// <summary>
		/// PIXHAWK autopilot, http://pixhawk.ethz.ch
		/// </summary>
		MAV_AUTOPILOT_PIXHAWK = 1,

		/// <summary>
		/// SLUGS autopilot, http://slugsuav.soe.ucsc.edu
		/// </summary>
		MAV_AUTOPILOT_SLUGS = 2,

		/// <summary>
		/// ArduPilotMega / ArduCopter, http://diydrones.com
		/// </summary>
		MAV_AUTOPILOT_ARDUPILOTMEGA = 3,

		/// <summary>
		/// OpenPilot, http://openpilot.org
		/// </summary>
		MAV_AUTOPILOT_OPENPILOT = 4,

		/// <summary>
		/// Generic autopilot only supporting simple waypoints
		/// </summary>
		MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5,

		/// <summary>
		/// Generic autopilot supporting waypoints and other simple navigation commands
		/// </summary>
		MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6,

		/// <summary>
		/// Generic autopilot supporting the full mission command set
		/// </summary>
		MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7,

		/// <summary>
		/// No valid autopilot, e.g. a GCS or other MAVLink component
		/// </summary>
		MAV_AUTOPILOT_INVALID = 8,

		/// <summary>
		/// PPZ UAV - http://nongnu.org/paparazzi
		/// </summary>
		MAV_AUTOPILOT_PPZ = 9,

		/// <summary>
		/// UAV Dev Board
		/// </summary>
		MAV_AUTOPILOT_UDB = 10,

		/// <summary>
		/// FlexiPilot
		/// </summary>
		MAV_AUTOPILOT_FP = 11,

		/// <summary>
		/// PX4 Autopilot - http://pixhawk.ethz.ch/px4/
		/// </summary>
		MAV_AUTOPILOT_PX4 = 12,

		/// <summary>
		/// SMACCMPilot - http://smaccmpilot.org
		/// </summary>
		MAV_AUTOPILOT_SMACCMPILOT = 13,

		/// <summary>
		/// AutoQuad -- http://autoquad.org
		/// </summary>
		MAV_AUTOPILOT_AUTOQUAD = 14,

		/// <summary>
		/// Armazila -- http://armazila.com
		/// </summary>
		MAV_AUTOPILOT_ARMAZILA = 15,

		/// <summary>
		/// Aerob -- http://aerob.ru
		/// </summary>
		MAV_AUTOPILOT_AEROB = 16,
		MAV_AUTOPILOT_ENUM_END = 17,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_TYPE : ushort
	{

		/// <summary>
		/// Generic micro air vehicle.
		/// </summary>
		MAV_TYPE_GENERIC = 0,

		/// <summary>
		/// Fixed wing aircraft.
		/// </summary>
		MAV_TYPE_FIXED_WING = 1,

		/// <summary>
		/// Quadrotor
		/// </summary>
		MAV_TYPE_QUADROTOR = 2,

		/// <summary>
		/// Coaxial helicopter
		/// </summary>
		MAV_TYPE_COAXIAL = 3,

		/// <summary>
		/// Normal helicopter with tail rotor.
		/// </summary>
		MAV_TYPE_HELICOPTER = 4,

		/// <summary>
		/// Ground installation
		/// </summary>
		MAV_TYPE_ANTENNA_TRACKER = 5,

		/// <summary>
		/// Operator control unit / ground control station
		/// </summary>
		MAV_TYPE_GCS = 6,

		/// <summary>
		/// Airship, controlled
		/// </summary>
		MAV_TYPE_AIRSHIP = 7,

		/// <summary>
		/// Free balloon, uncontrolled
		/// </summary>
		MAV_TYPE_FREE_BALLOON = 8,

		/// <summary>
		/// Rocket
		/// </summary>
		MAV_TYPE_ROCKET = 9,

		/// <summary>
		/// Ground rover
		/// </summary>
		MAV_TYPE_GROUND_ROVER = 10,

		/// <summary>
		/// Surface vessel, boat, ship
		/// </summary>
		MAV_TYPE_SURFACE_BOAT = 11,

		/// <summary>
		/// Submarine
		/// </summary>
		MAV_TYPE_SUBMARINE = 12,

		/// <summary>
		/// Hexarotor
		/// </summary>
		MAV_TYPE_HEXAROTOR = 13,

		/// <summary>
		/// Octorotor
		/// </summary>
		MAV_TYPE_OCTOROTOR = 14,

		/// <summary>
		/// Octorotor
		/// </summary>
		MAV_TYPE_TRICOPTER = 15,

		/// <summary>
		/// Flapping wing
		/// </summary>
		MAV_TYPE_FLAPPING_WING = 16,

		/// <summary>
		/// Flapping wing
		/// </summary>
		MAV_TYPE_KITE = 17,

		/// <summary>
		/// Onboard companion controller
		/// </summary>
		MAV_TYPE_ONBOARD_CONTROLLER = 18,
		MAV_TYPE_ENUM_END = 19,

	}


	/// <summary>
	/// These flags encode the MAV mode.
	/// </summary>
	public enum MAV_MODE_FLAG : ushort
	{

		/// <summary>
		/// 0b00000001 Reserved for future use.
		/// </summary>
		MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1,

		/// <summary>
		/// 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.
		/// </summary>
		MAV_MODE_FLAG_TEST_ENABLED = 2,

		/// <summary>
		/// 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.
		/// </summary>
		MAV_MODE_FLAG_AUTO_ENABLED = 4,

		/// <summary>
		/// 0b00001000 guided mode enabled, system flies MISSIONs / mission items.
		/// </summary>
		MAV_MODE_FLAG_GUIDED_ENABLED = 8,

		/// <summary>
		/// 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.
		/// </summary>
		MAV_MODE_FLAG_STABILIZE_ENABLED = 16,

		/// <summary>
		/// 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.
		/// </summary>
		MAV_MODE_FLAG_HIL_ENABLED = 32,

		/// <summary>
		/// 0b01000000 remote control input is enabled.
		/// </summary>
		MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64,

		/// <summary>
		/// 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly.
		/// </summary>
		MAV_MODE_FLAG_SAFETY_ARMED = 128,
		MAV_MODE_FLAG_ENUM_END = 129,

	}


	/// <summary>
	/// These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.
	/// </summary>
	public enum MAV_MODE_FLAG_DECODE_POSITION : ushort
	{

		/// <summary>
		/// Eighth bit: 00000001
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 1,

		/// <summary>
		/// Seventh bit: 00000010
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_TEST = 2,

		/// <summary>
		/// Sixt bit:   00000100
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_AUTO = 4,

		/// <summary>
		/// Fifth bit:  00001000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 8,

		/// <summary>
		/// Fourth bit: 00010000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 16,

		/// <summary>
		/// Third bit:  00100000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_HIL = 32,

		/// <summary>
		/// Second bit: 01000000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 64,

		/// <summary>
		/// First bit:  10000000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 128,
		MAV_MODE_FLAG_DECODE_POSITION_ENUM_END = 129,

	}


	/// <summary>
	/// Override command, pauses current mission execution and moves immediately to a position
	/// </summary>
	public enum MAV_GOTO : ushort
	{

		/// <summary>
		/// Hold at the current position.
		/// </summary>
		MAV_GOTO_DO_HOLD = 0,

		/// <summary>
		/// Continue with the next item in mission execution.
		/// </summary>
		MAV_GOTO_DO_CONTINUE = 1,

		/// <summary>
		/// Hold at the current position of the system
		/// </summary>
		MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2,

		/// <summary>
		/// Hold at the position specified in the parameters of the DO_HOLD action
		/// </summary>
		MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3,
		MAV_GOTO_ENUM_END = 4,

	}


	/// <summary>
	/// These defines are predefined OR-combined mode flags. There is no need to use values from this enum, but it
	///               simplifies the use of the mode flags. Note that manual input is enabled in all modes as a safety override.
	/// </summary>
	public enum MAV_MODE : ushort
	{

		/// <summary>
		/// System is not ready to fly, booting, calibrating, etc. No flag is set.
		/// </summary>
		MAV_MODE_PREFLIGHT = 0,

		/// <summary>
		/// System is allowed to be active, under manual (RC) control, no stabilization
		/// </summary>
		MAV_MODE_MANUAL_DISARMED = 64,

		/// <summary>
		/// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
		/// </summary>
		MAV_MODE_TEST_DISARMED = 66,

		/// <summary>
		/// System is allowed to be active, under assisted RC control.
		/// </summary>
		MAV_MODE_STABILIZE_DISARMED = 80,

		/// <summary>
		/// System is allowed to be active, under autonomous control, manual setpoint
		/// </summary>
		MAV_MODE_GUIDED_DISARMED = 88,

		/// <summary>
		/// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by MISSIONs)
		/// </summary>
		MAV_MODE_AUTO_DISARMED = 92,

		/// <summary>
		/// System is allowed to be active, under manual (RC) control, no stabilization
		/// </summary>
		MAV_MODE_MANUAL_ARMED = 192,

		/// <summary>
		/// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
		/// </summary>
		MAV_MODE_TEST_ARMED = 194,

		/// <summary>
		/// System is allowed to be active, under assisted RC control.
		/// </summary>
		MAV_MODE_STABILIZE_ARMED = 208,

		/// <summary>
		/// System is allowed to be active, under autonomous control, manual setpoint
		/// </summary>
		MAV_MODE_GUIDED_ARMED = 216,

		/// <summary>
		/// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by MISSIONs)
		/// </summary>
		MAV_MODE_AUTO_ARMED = 220,
		MAV_MODE_ENUM_END = 221,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_STATE : ushort
	{

		/// <summary>
		/// Uninitialized system, state is unknown.
		/// </summary>
		MAV_STATE_UNINIT = 0,

		/// <summary>
		/// System is booting up.
		/// </summary>
		MAV_STATE_BOOT = 1,

		/// <summary>
		/// System is calibrating and not flight-ready.
		/// </summary>
		MAV_STATE_CALIBRATING = 2,

		/// <summary>
		/// System is grounded and on standby. It can be launched any time.
		/// </summary>
		MAV_STATE_STANDBY = 3,

		/// <summary>
		/// System is active and might be already airborne. Motors are engaged.
		/// </summary>
		MAV_STATE_ACTIVE = 4,

		/// <summary>
		/// System is in a non-normal flight mode. It can however still navigate.
		/// </summary>
		MAV_STATE_CRITICAL = 5,

		/// <summary>
		/// System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down.
		/// </summary>
		MAV_STATE_EMERGENCY = 6,

		/// <summary>
		/// System just initialized its power-down sequence, will shut down now.
		/// </summary>
		MAV_STATE_POWEROFF = 7,
		MAV_STATE_ENUM_END = 8,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_COMPONENT : ushort
	{
		MAV_COMP_ID_ALL = 0,
		MAV_COMP_ID_CAMERA = 100,
		MAV_COMP_ID_SERVO1 = 140,
		MAV_COMP_ID_SERVO2 = 141,
		MAV_COMP_ID_SERVO3 = 142,
		MAV_COMP_ID_SERVO4 = 143,
		MAV_COMP_ID_SERVO5 = 144,
		MAV_COMP_ID_SERVO6 = 145,
		MAV_COMP_ID_SERVO7 = 146,
		MAV_COMP_ID_SERVO8 = 147,
		MAV_COMP_ID_SERVO9 = 148,
		MAV_COMP_ID_SERVO10 = 149,
		MAV_COMP_ID_SERVO11 = 150,
		MAV_COMP_ID_SERVO12 = 151,
		MAV_COMP_ID_SERVO13 = 152,
		MAV_COMP_ID_SERVO14 = 153,
		MAV_COMP_ID_MAPPER = 180,
		MAV_COMP_ID_MISSIONPLANNER = 190,
		MAV_COMP_ID_PATHPLANNER = 195,
		MAV_COMP_ID_IMU = 200,
		MAV_COMP_ID_IMU_2 = 201,
		MAV_COMP_ID_IMU_3 = 202,
		MAV_COMP_ID_GPS = 220,
		MAV_COMP_ID_UDP_BRIDGE = 240,
		MAV_COMP_ID_UART_BRIDGE = 241,
		MAV_COMP_ID_SYSTEM_CONTROL = 250,
		MAV_COMPONENT_ENUM_END = 251,

	}


	/// <summary>
	/// These encode the sensors whose status is sent as part of the SYS_STATUS message.
	/// </summary>
	public enum MAV_SYS_STATUS_SENSOR : ushort
	{

		/// <summary>
		/// 0x01 3D gyro
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_GYRO = 1,

		/// <summary>
		/// 0x02 3D accelerometer
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_ACCEL = 2,

		/// <summary>
		/// 0x04 3D magnetometer
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_MAG = 4,

		/// <summary>
		/// 0x08 absolute pressure
		/// </summary>
		MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = 8,

		/// <summary>
		/// 0x10 differential pressure
		/// </summary>
		MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = 16,

		/// <summary>
		/// 0x20 GPS
		/// </summary>
		MAV_SYS_STATUS_SENSOR_GPS = 32,

		/// <summary>
		/// 0x40 optical flow
		/// </summary>
		MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = 64,

		/// <summary>
		/// 0x80 computer vision position
		/// </summary>
		MAV_SYS_STATUS_SENSOR_VISION_POSITION = 128,

		/// <summary>
		/// 0x100 laser based position
		/// </summary>
		MAV_SYS_STATUS_SENSOR_LASER_POSITION = 256,

		/// <summary>
		/// 0x200 external ground truth (Vicon or Leica)
		/// </summary>
		MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = 512,

		/// <summary>
		/// 0x400 3D angular rate control
		/// </summary>
		MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = 1024,

		/// <summary>
		/// 0x800 attitude stabilization
		/// </summary>
		MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = 2048,

		/// <summary>
		/// 0x1000 yaw position
		/// </summary>
		MAV_SYS_STATUS_SENSOR_YAW_POSITION = 4096,

		/// <summary>
		/// 0x2000 z/altitude control
		/// </summary>
		MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = 8192,

		/// <summary>
		/// 0x4000 x/y position control
		/// </summary>
		MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = 16384,

		/// <summary>
		/// 0x8000 motor outputs / control
		/// </summary>
		MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = 32768,

		/// <summary>
		/// 0x10000 rc receiver
		/// </summary>
		//MAV_SYS_STATUS_SENSOR_RC_RECEIVER = 65536,

		/// <summary>
		/// 0x20000 2nd 3D gyro
		/// </summary>
		//MAV_SYS_STATUS_SENSOR_3D_GYRO2 = 131072,

		/// <summary>
		/// 0x40000 2nd 3D accelerometer
		/// </summary>
		//MAV_SYS_STATUS_SENSOR_3D_ACCEL2 = 262144,

		/// <summary>
		/// 0x80000 2nd 3D magnetometer
		/// </summary>
		//MAV_SYS_STATUS_SENSOR_3D_MAG2 = 524288,
		//MAV_SYS_STATUS_SENSOR_ENUM_END = 524289,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_FRAME : ushort
	{

		/// <summary>
		/// Global coordinate frame, WGS84 coordinate system. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL)
		/// </summary>
		MAV_FRAME_GLOBAL = 0,

		/// <summary>
		/// Local coordinate frame, Z-up (x: north, y: east, z: down).
		/// </summary>
		MAV_FRAME_LOCAL_NED = 1,

		/// <summary>
		/// NOT a coordinate frame, indicates a mission command.
		/// </summary>
		MAV_FRAME_MISSION = 2,

		/// <summary>
		/// Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
		/// </summary>
		MAV_FRAME_GLOBAL_RELATIVE_ALT = 3,

		/// <summary>
		/// Local coordinate frame, Z-down (x: east, y: north, z: up)
		/// </summary>
		MAV_FRAME_LOCAL_ENU = 4,
		MAV_FRAME_ENUM_END = 5,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAVLINK_DATA_STREAM_TYPE : ushort
	{
		MAVLINK_DATA_STREAM_IMG_JPEG = 1,
		MAVLINK_DATA_STREAM_IMG_BMP = 2,
		MAVLINK_DATA_STREAM_IMG_RAW8U = 3,
		MAVLINK_DATA_STREAM_IMG_RAW32U = 4,
		MAVLINK_DATA_STREAM_IMG_PGM = 5,
		MAVLINK_DATA_STREAM_IMG_PNG = 6,
		MAVLINK_DATA_STREAM_TYPE_ENUM_END = 7,

	}


	/// <summary>
	/// Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data.
	/// </summary>
	public enum MAV_CMD : ushort
	{

		/// <summary>
		/// Navigate to MISSION.
		/// </summary>
		MAV_CMD_NAV_WAYPOINT = 16,

		/// <summary>
		/// Loiter around this MISSION an unlimited amount of time
		/// </summary>
		MAV_CMD_NAV_LOITER_UNLIM = 17,

		/// <summary>
		/// Loiter around this MISSION for X turns
		/// </summary>
		MAV_CMD_NAV_LOITER_TURNS = 18,

		/// <summary>
		/// Loiter around this MISSION for X seconds
		/// </summary>
		MAV_CMD_NAV_LOITER_TIME = 19,

		/// <summary>
		/// Return to launch location
		/// </summary>
		MAV_CMD_NAV_RETURN_TO_LAUNCH = 20,

		/// <summary>
		/// Land at location
		/// </summary>
		MAV_CMD_NAV_LAND = 21,

		/// <summary>
		/// Takeoff from ground / hand
		/// </summary>
		MAV_CMD_NAV_TAKEOFF = 22,

		/// <summary>
		/// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras.
		/// </summary>
		MAV_CMD_NAV_ROI = 80,

		/// <summary>
		/// Control autonomous path planning on the MAV.
		/// </summary>
		MAV_CMD_NAV_PATHPLANNING = 81,

		/// <summary>
		/// NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
		/// </summary>
		MAV_CMD_NAV_LAST = 95,

		/// <summary>
		/// Delay mission state machine.
		/// </summary>
		MAV_CMD_CONDITION_DELAY = 112,

		/// <summary>
		/// Ascend/descend at rate.  Delay mission state machine until desired altitude reached.
		/// </summary>
		MAV_CMD_CONDITION_CHANGE_ALT = 113,

		/// <summary>
		/// Delay mission state machine until within desired distance of next NAV point.
		/// </summary>
		MAV_CMD_CONDITION_DISTANCE = 114,

		/// <summary>
		/// Reach a certain target angle.
		/// </summary>
		MAV_CMD_CONDITION_YAW = 115,

		/// <summary>
		/// NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
		/// </summary>
		MAV_CMD_CONDITION_LAST = 159,

		/// <summary>
		/// Set system mode.
		/// </summary>
		MAV_CMD_DO_SET_MODE = 176,

		/// <summary>
		/// Jump to the desired command in the mission list.  Repeat this action only the specified number of times
		/// </summary>
		MAV_CMD_DO_JUMP = 177,

		/// <summary>
		/// Change speed and/or throttle set points.
		/// </summary>
		MAV_CMD_DO_CHANGE_SPEED = 178,

		/// <summary>
		/// Changes the home location either to the current location or a specified location.
		/// </summary>
		MAV_CMD_DO_SET_HOME = 179,

		/// <summary>
		/// Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
		/// </summary>
		MAV_CMD_DO_SET_PARAMETER = 180,

		/// <summary>
		/// Set a relay to a condition.
		/// </summary>
		MAV_CMD_DO_SET_RELAY = 181,

		/// <summary>
		/// Cycle a relay on and off for a desired number of cyles with a desired period.
		/// </summary>
		MAV_CMD_DO_REPEAT_RELAY = 182,

		/// <summary>
		/// Set a servo to a desired PWM value.
		/// </summary>
		MAV_CMD_DO_SET_SERVO = 183,

		/// <summary>
		/// Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
		/// </summary>
		MAV_CMD_DO_REPEAT_SERVO = 184,

		/// <summary>
		/// Control onboard camera system.
		/// </summary>
		MAV_CMD_DO_CONTROL_VIDEO = 200,

		/// <summary>
		/// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras.
		/// </summary>
		MAV_CMD_DO_SET_ROI = 201,

		/// <summary>
		/// NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
		/// </summary>
		MAV_CMD_DO_LAST = 240,

		/// <summary>
		/// Trigger calibration. This command will be only accepted if in pre-flight mode.
		/// </summary>
		MAV_CMD_PREFLIGHT_CALIBRATION = 241,

		/// <summary>
		/// Set sensor offsets. This command will be only accepted if in pre-flight mode.
		/// </summary>
		MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242,

		/// <summary>
		/// Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
		/// </summary>
		MAV_CMD_PREFLIGHT_STORAGE = 245,

		/// <summary>
		/// Request the reboot or shutdown of system components.
		/// </summary>
		MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246,

		/// <summary>
		/// Hold / continue the current action
		/// </summary>
		MAV_CMD_OVERRIDE_GOTO = 252,

		/// <summary>
		/// start running a mission
		/// </summary>
		MAV_CMD_MISSION_START = 300,

		/// <summary>
		/// Arms / Disarms a component
		/// </summary>
		MAV_CMD_COMPONENT_ARM_DISARM = 400,

		/// <summary>
		/// Starts receiver pairing
		/// </summary>
		MAV_CMD_START_RX_PAIR = 500,
		MAV_CMD_ENUM_END = 501,

	}


	/// <summary>
	/// Data stream IDs. A data stream is not a fixed set of messages, but rather a
	///     recommendation to the autopilot software. Individual autopilots may or may not obey
	///     the recommended messages.
	/// </summary>
	public enum MAV_DATA_STREAM : ushort
	{

		/// <summary>
		/// Enable all data streams
		/// </summary>
		MAV_DATA_STREAM_ALL = 0,

		/// <summary>
		/// Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
		/// </summary>
		MAV_DATA_STREAM_RAW_SENSORS = 1,

		/// <summary>
		/// Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
		/// </summary>
		MAV_DATA_STREAM_EXTENDED_STATUS = 2,

		/// <summary>
		/// Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
		/// </summary>
		MAV_DATA_STREAM_RC_CHANNELS = 3,

		/// <summary>
		/// Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT.
		/// </summary>
		MAV_DATA_STREAM_RAW_CONTROLLER = 4,

		/// <summary>
		/// Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.
		/// </summary>
		MAV_DATA_STREAM_POSITION = 6,

		/// <summary>
		/// Dependent on the autopilot
		/// </summary>
		MAV_DATA_STREAM_EXTRA1 = 10,

		/// <summary>
		/// Dependent on the autopilot
		/// </summary>
		MAV_DATA_STREAM_EXTRA2 = 11,

		/// <summary>
		/// Dependent on the autopilot
		/// </summary>
		MAV_DATA_STREAM_EXTRA3 = 12,
		MAV_DATA_STREAM_ENUM_END = 13,

	}


	/// <summary>
	///  The ROI (region of interest) for the vehicle. This can be
	///                be used by the vehicle for camera/vehicle attitude alignment (see
	///                MAV_CMD_NAV_ROI).
	/// </summary>
	public enum MAV_ROI : ushort
	{

		/// <summary>
		/// No region of interest.
		/// </summary>
		MAV_ROI_NONE = 0,

		/// <summary>
		/// Point toward next MISSION.
		/// </summary>
		MAV_ROI_WPNEXT = 1,

		/// <summary>
		/// Point toward given MISSION.
		/// </summary>
		MAV_ROI_WPINDEX = 2,

		/// <summary>
		/// Point toward fixed location.
		/// </summary>
		MAV_ROI_LOCATION = 3,

		/// <summary>
		/// Point toward of given id.
		/// </summary>
		MAV_ROI_TARGET = 4,
		MAV_ROI_ENUM_END = 5,

	}


	/// <summary>
	/// ACK / NACK / ERROR values as a result of MAV_CMDs and for mission item transmission.
	/// </summary>
	public enum MAV_CMD_ACK : ushort
	{

		/// <summary>
		/// Command / mission item is ok.
		/// </summary>
		MAV_CMD_ACK_OK = 1,

		/// <summary>
		/// Generic error message if none of the other reasons fails or if no detailed error reporting is implemented.
		/// </summary>
		MAV_CMD_ACK_ERR_FAIL = 2,

		/// <summary>
		/// The system is refusing to accept this command from this source / communication partner.
		/// </summary>
		MAV_CMD_ACK_ERR_ACCESS_DENIED = 3,

		/// <summary>
		/// Command or mission item is not supported, other commands would be accepted.
		/// </summary>
		MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4,

		/// <summary>
		/// The coordinate frame of this command / mission item is not supported.
		/// </summary>
		MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5,

		/// <summary>
		/// The coordinate frame of this command is ok, but he coordinate values exceed the safety limits of this system. This is a generic error, please use the more specific error messages below if possible.
		/// </summary>
		MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6,

		/// <summary>
		/// The X or latitude value is out of range.
		/// </summary>
		MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7,

		/// <summary>
		/// The Y or longitude value is out of range.
		/// </summary>
		MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8,

		/// <summary>
		/// The Z or altitude value is out of range.
		/// </summary>
		MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9,
		MAV_CMD_ACK_ENUM_END = 10,

	}


	/// <summary>
	/// Specifies the datatype of a MAVLink parameter.
	/// </summary>
	public enum MAV_PARAM_TYPE : ushort
	{

		/// <summary>
		/// 8-bit unsigned integer
		/// </summary>
		MAV_PARAM_TYPE_UINT8 = 1,

		/// <summary>
		/// 8-bit signed integer
		/// </summary>
		MAV_PARAM_TYPE_INT8 = 2,

		/// <summary>
		/// 16-bit unsigned integer
		/// </summary>
		MAV_PARAM_TYPE_UINT16 = 3,

		/// <summary>
		/// 16-bit signed integer
		/// </summary>
		MAV_PARAM_TYPE_INT16 = 4,

		/// <summary>
		/// 32-bit unsigned integer
		/// </summary>
		MAV_PARAM_TYPE_UINT32 = 5,

		/// <summary>
		/// 32-bit signed integer
		/// </summary>
		MAV_PARAM_TYPE_INT32 = 6,

		/// <summary>
		/// 64-bit unsigned integer
		/// </summary>
		MAV_PARAM_TYPE_UINT64 = 7,

		/// <summary>
		/// 64-bit signed integer
		/// </summary>
		MAV_PARAM_TYPE_INT64 = 8,

		/// <summary>
		/// 32-bit floating-point
		/// </summary>
		MAV_PARAM_TYPE_REAL32 = 9,

		/// <summary>
		/// 64-bit floating-point
		/// </summary>
		MAV_PARAM_TYPE_REAL64 = 10,
		MAV_PARAM_TYPE_ENUM_END = 11,

	}


	/// <summary>
	/// result from a mavlink command
	/// </summary>
	public enum MAV_RESULT : ushort
	{

		/// <summary>
		/// Command ACCEPTED and EXECUTED
		/// </summary>
		MAV_RESULT_ACCEPTED = 0,

		/// <summary>
		/// Command TEMPORARY REJECTED/DENIED
		/// </summary>
		MAV_RESULT_TEMPORARILY_REJECTED = 1,

		/// <summary>
		/// Command PERMANENTLY DENIED
		/// </summary>
		MAV_RESULT_DENIED = 2,

		/// <summary>
		/// Command UNKNOWN/UNSUPPORTED
		/// </summary>
		MAV_RESULT_UNSUPPORTED = 3,

		/// <summary>
		/// Command executed, but failed
		/// </summary>
		MAV_RESULT_FAILED = 4,
		MAV_RESULT_ENUM_END = 5,

	}


	/// <summary>
	/// result in a mavlink mission ack
	/// </summary>
	public enum MAV_MISSION_RESULT : ushort
	{

		/// <summary>
		/// mission accepted OK
		/// </summary>
		MAV_MISSION_ACCEPTED = 0,

		/// <summary>
		/// generic error / not accepting mission commands at all right now
		/// </summary>
		MAV_MISSION_ERROR = 1,

		/// <summary>
		/// coordinate frame is not supported
		/// </summary>
		MAV_MISSION_UNSUPPORTED_FRAME = 2,

		/// <summary>
		/// command is not supported
		/// </summary>
		MAV_MISSION_UNSUPPORTED = 3,

		/// <summary>
		/// mission item exceeds storage space
		/// </summary>
		MAV_MISSION_NO_SPACE = 4,

		/// <summary>
		/// one of the parameters has an invalid value
		/// </summary>
		MAV_MISSION_INVALID = 5,

		/// <summary>
		/// param1 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM1 = 6,

		/// <summary>
		/// param2 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM2 = 7,

		/// <summary>
		/// param3 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM3 = 8,

		/// <summary>
		/// param4 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM4 = 9,

		/// <summary>
		/// x/param5 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM5_X = 10,

		/// <summary>
		/// y/param6 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM6_Y = 11,

		/// <summary>
		/// param7 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM7 = 12,

		/// <summary>
		/// received waypoint out of sequence
		/// </summary>
		MAV_MISSION_INVALID_SEQUENCE = 13,

		/// <summary>
		/// not accepting any mission commands from this communication partner
		/// </summary>
		MAV_MISSION_DENIED = 14,
		MAV_MISSION_RESULT_ENUM_END = 15,

	}


	/// <summary>
	/// Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/.
	/// </summary>
	public enum MAV_SEVERITY : ushort
	{

		/// <summary>
		/// System is unusable. This is a "panic" condition.
		/// </summary>
		MAV_SEVERITY_EMERGENCY = 0,

		/// <summary>
		/// Action should be taken immediately. Indicates error in non-critical systems.
		/// </summary>
		MAV_SEVERITY_ALERT = 1,

		/// <summary>
		/// Action must be taken immediately. Indicates failure in a primary system.
		/// </summary>
		MAV_SEVERITY_CRITICAL = 2,

		/// <summary>
		/// Indicates an error in secondary/redundant systems.
		/// </summary>
		MAV_SEVERITY_ERROR = 3,

		/// <summary>
		/// Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning.
		/// </summary>
		MAV_SEVERITY_WARNING = 4,

		/// <summary>
		/// An unusual event has occured, though not an error condition. This should be investigated for the root cause.
		/// </summary>
		MAV_SEVERITY_NOTICE = 5,

		/// <summary>
		/// Normal operational messages. Useful for logging. No action is required for these messages.
		/// </summary>
		MAV_SEVERITY_INFO = 6,

		/// <summary>
		/// Useful non-operational messages that can assist in debugging. These should not occur during normal operation.
		/// </summary>
		MAV_SEVERITY_DEBUG = 7,
		MAV_SEVERITY_ENUM_END = 8,

	}


	/// <summary>
	/// Power supply status flags (bitmask)
	/// </summary>
	public enum MAV_POWER_STATUS : ushort
	{

		/// <summary>
		/// main brick power supply valid
		/// </summary>
		MAV_POWER_STATUS_BRICK_VALID = 1,

		/// <summary>
		/// main servo power supply valid for FMU
		/// </summary>
		MAV_POWER_STATUS_SERVO_VALID = 2,

		/// <summary>
		/// USB power is connected
		/// </summary>
		MAV_POWER_STATUS_USB_CONNECTED = 4,

		/// <summary>
		/// peripheral supply is in over-current state
		/// </summary>
		MAV_POWER_STATUS_PERIPH_OVERCURRENT = 8,

		/// <summary>
		/// hi-power peripheral supply is in over-current state
		/// </summary>
		MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = 16,

		/// <summary>
		/// Power status has changed since boot
		/// </summary>
		MAV_POWER_STATUS_CHANGED = 32,
		MAV_POWER_STATUS_ENUM_END = 33,

	}


}

    
   
namespace MavLink
{

    public abstract class MavlinkMessage
    {
        public abstract int Serialize(byte[] bytes, ref int offset);
    }

	/// <summary>
	/// The heartbeat message shows that a system is present and responding. The type of the MAV and Autopilot hardware allow the receiving system to treat further messages from this system appropriate (e.g. by laying out the user interface based on the autopilot).
	/// </summary>
	public class Msg_heartbeat : MavlinkMessage
    {

		/// <summary>
		/// Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM)
		/// </summary>
		public byte type;

		/// <summary>
		/// Autopilot type / class. defined in MAV_AUTOPILOT ENUM
		/// </summary>
		public byte autopilot;

		/// <summary>
		/// System mode bitfield, see MAV_MODE_FLAGS ENUM in mavlink/include/mavlink_types.h
		/// </summary>
		public byte base_mode;

		/// <summary>
		/// A bitfield for use for autopilot-specific flags.
		/// </summary>
		public UInt32 custom_mode;

		/// <summary>
		/// System status flag, see MAV_STATE ENUM
		/// </summary>
		public byte system_status;

		/// <summary>
		/// MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version
		/// </summary>
		public byte mavlink_version;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HEARTBEAT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows wether the system is currently active or not and if an emergency occured. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occured it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
	/// </summary>
	public class Msg_sys_status : MavlinkMessage
    {

		/// <summary>
		/// Bitmask showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. Indices defined by ENUM MAV_SYS_STATUS_SENSOR
		/// </summary>
		public UInt32 onboard_control_sensors_present;

		/// <summary>
		/// Bitmask showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. Indices defined by ENUM MAV_SYS_STATUS_SENSOR
		/// </summary>
		public UInt32 onboard_control_sensors_enabled;

		/// <summary>
		/// Bitmask showing which onboard controllers and sensors are operational or have an error:  Value of 0: not enabled. Value of 1: enabled. Indices defined by ENUM MAV_SYS_STATUS_SENSOR
		/// </summary>
		public UInt32 onboard_control_sensors_health;

		/// <summary>
		/// Maximum usage in percent of the mainloop time, (0%: 0, 100%: 1000) should be always below 1000
		/// </summary>
		public UInt16 load;

		/// <summary>
		/// Battery voltage, in millivolts (1 = 1 millivolt)
		/// </summary>
		public UInt16 voltage_battery;

		/// <summary>
		/// Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current
		/// </summary>
		public Int16 current_battery;

		/// <summary>
		/// Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot estimate the remaining battery
		/// </summary>
		public sbyte battery_remaining;

		/// <summary>
		/// Communication drops in percent, (0%: 0, 100%: 10'000), (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
		/// </summary>
		public UInt16 drop_rate_comm;

		/// <summary>
		/// Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
		/// </summary>
		public UInt16 errors_comm;

		/// <summary>
		/// Autopilot-specific errors
		/// </summary>
		public UInt16 errors_count1;

		/// <summary>
		/// Autopilot-specific errors
		/// </summary>
		public UInt16 errors_count2;

		/// <summary>
		/// Autopilot-specific errors
		/// </summary>
		public UInt16 errors_count3;

		/// <summary>
		/// Autopilot-specific errors
		/// </summary>
		public UInt16 errors_count4;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SYS_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The system time is the time of the master clock, typically the computer clock of the main onboard computer.
	/// </summary>
	public class Msg_system_time : MavlinkMessage
    {

		/// <summary>
		/// Timestamp of the master clock in microseconds since UNIX epoch.
		/// </summary>
		public UInt64 time_unix_usec;

		/// <summary>
		/// Timestamp of the component clock since boot time in milliseconds.
		/// </summary>
		public UInt32 time_boot_ms;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SYSTEM_TIME(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections.
	/// </summary>
	public class Msg_ping : MavlinkMessage
    {

		/// <summary>
		/// Unix timestamp in microseconds
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// PING sequence
		/// </summary>
		public UInt32 seq;

		/// <summary>
		/// 0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system
		/// </summary>
		public byte target_system;

		/// <summary>
		/// 0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PING(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request to control this MAV
	/// </summary>
	public class Msg_change_operator_control : MavlinkMessage
    {

		/// <summary>
		/// System the GCS requests control for
		/// </summary>
		public byte target_system;

		/// <summary>
		/// 0: request control of this MAV, 1: Release control of this MAV
		/// </summary>
		public byte control_request;

		/// <summary>
		/// 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.
		/// </summary>
		public byte version;

		/// <summary>
		/// Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"
		/// </summary>
		public byte[] passkey; // Array size 25

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CHANGE_OPERATOR_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Accept / deny control of this MAV
	/// </summary>
	public class Msg_change_operator_control_ack : MavlinkMessage
    {

		/// <summary>
		/// ID of the GCS this message 
		/// </summary>
		public byte gcs_system_id;

		/// <summary>
		/// 0: request control of this MAV, 1: Release control of this MAV
		/// </summary>
		public byte control_request;

		/// <summary>
		/// 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control
		/// </summary>
		public byte ack;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CHANGE_OPERATOR_CONTROL_ACK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.
	/// </summary>
	public class Msg_auth_key : MavlinkMessage
    {
		public byte[] key; // Array size 32

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AUTH_KEY(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
	/// </summary>
	public class Msg_set_mode : MavlinkMessage
    {

		/// <summary>
		/// The system setting the mode
		/// </summary>
		public byte target_system;

		/// <summary>
		/// The new base mode
		/// </summary>
		public byte base_mode;

		/// <summary>
		/// The new autopilot-specific mode. This field can be ignored by an autopilot.
		/// </summary>
		public UInt32 custom_mode;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_MODE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also http://qgroundcontrol.org/parameter_interface for a full documentation of QGroundControl and IMU code.
	/// </summary>
	public class Msg_param_request_read : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
		/// </summary>
		public byte[] param_id; // Array size 16

		/// <summary>
		/// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
		/// </summary>
		public Int16 param_index;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_REQUEST_READ(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request all parameters of this component. After his request, all parameters are emitted.
	/// </summary>
	public class Msg_param_request_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_REQUEST_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout.
	/// </summary>
	public class Msg_param_value : MavlinkMessage
    {

		/// <summary>
		/// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
		/// </summary>
		public byte[] param_id; // Array size 16

		/// <summary>
		/// Onboard parameter value
		/// </summary>
		public float param_value;

		/// <summary>
		/// Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
		/// </summary>
		public byte param_type;

		/// <summary>
		/// Total number of onboard parameters
		/// </summary>
		public UInt16 param_count;

		/// <summary>
		/// Index of this onboard parameter
		/// </summary>
		public UInt16 param_index;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_VALUE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set a parameter value TEMPORARILY to RAM. It will be reset to default on system reboot. Send the ACTION MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM contents to EEPROM. IMPORTANT: The receiving component should acknowledge the new parameter value by sending a param_value message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message.
	/// </summary>
	public class Msg_param_set : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
		/// </summary>
		public byte[] param_id; // Array size 16

		/// <summary>
		/// Onboard parameter value
		/// </summary>
		public float param_value;

		/// <summary>
		/// Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
		/// </summary>
		public byte param_type;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_SET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The global position, as returned by the Global Positioning System (GPS). This is
	///                NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).
	/// </summary>
	public class Msg_gps_raw_int : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
		/// </summary>
		public byte fix_type;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude (WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 eph;

		/// <summary>
		/// GPS VDOP vertical dilution of position in cm (m*100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 epv;

		/// <summary>
		/// GPS ground speed (m/s * 100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 vel;

		/// <summary>
		/// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 cog;

		/// <summary>
		/// Number of satellites visible. If unknown, set to 255
		/// </summary>
		public byte satellites_visible;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_RAW_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.
	/// </summary>
	public class Msg_gps_status : MavlinkMessage
    {

		/// <summary>
		/// Number of satellites visible
		/// </summary>
		public byte satellites_visible;

		/// <summary>
		/// Global satellite ID
		/// </summary>
		public byte[] satellite_prn; // Array size 20

		/// <summary>
		/// 0: Satellite not used, 1: used for localization
		/// </summary>
		public byte[] satellite_used; // Array size 20

		/// <summary>
		/// Elevation (0: right on top of receiver, 90: on the horizon) of satellite
		/// </summary>
		public byte[] satellite_elevation; // Array size 20

		/// <summary>
		/// Direction of satellite, 0: 0 deg, 255: 360 deg.
		/// </summary>
		public byte[] satellite_azimuth; // Array size 20

		/// <summary>
		/// Signal to noise ratio of satellite
		/// </summary>
		public byte[] satellite_snr; // Array size 20

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units
	/// </summary>
	public class Msg_scaled_imu : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

		/// <summary>
		/// Angular speed around X axis (millirad /sec)
		/// </summary>
		public Int16 xgyro;

		/// <summary>
		/// Angular speed around Y axis (millirad /sec)
		/// </summary>
		public Int16 ygyro;

		/// <summary>
		/// Angular speed around Z axis (millirad /sec)
		/// </summary>
		public Int16 zgyro;

		/// <summary>
		/// X Magnetic field (milli tesla)
		/// </summary>
		public Int16 xmag;

		/// <summary>
		/// Y Magnetic field (milli tesla)
		/// </summary>
		public Int16 ymag;

		/// <summary>
		/// Z Magnetic field (milli tesla)
		/// </summary>
		public Int16 zmag;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_IMU(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW IMU readings for the usual 9DOF sensor setup. This message should always contain the true raw values without any scaling to allow data capture and system debugging.
	/// </summary>
	public class Msg_raw_imu : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// X acceleration (raw)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (raw)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (raw)
		/// </summary>
		public Int16 zacc;

		/// <summary>
		/// Angular speed around X axis (raw)
		/// </summary>
		public Int16 xgyro;

		/// <summary>
		/// Angular speed around Y axis (raw)
		/// </summary>
		public Int16 ygyro;

		/// <summary>
		/// Angular speed around Z axis (raw)
		/// </summary>
		public Int16 zgyro;

		/// <summary>
		/// X Magnetic field (raw)
		/// </summary>
		public Int16 xmag;

		/// <summary>
		/// Y Magnetic field (raw)
		/// </summary>
		public Int16 ymag;

		/// <summary>
		/// Z Magnetic field (raw)
		/// </summary>
		public Int16 zmag;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RAW_IMU(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.
	/// </summary>
	public class Msg_raw_pressure : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Absolute pressure (raw)
		/// </summary>
		public Int16 press_abs;

		/// <summary>
		/// Differential pressure 1 (raw)
		/// </summary>
		public Int16 press_diff1;

		/// <summary>
		/// Differential pressure 2 (raw)
		/// </summary>
		public Int16 press_diff2;

		/// <summary>
		/// Raw Temperature measurement (raw)
		/// </summary>
		public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RAW_PRESSURE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.
	/// </summary>
	public class Msg_scaled_pressure : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Absolute pressure (hectopascal)
		/// </summary>
		public float press_abs;

		/// <summary>
		/// Differential pressure 1 (hectopascal)
		/// </summary>
		public float press_diff;

		/// <summary>
		/// Temperature measurement (0.01 degrees celsius)
		/// </summary>
		public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_PRESSURE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).
	/// </summary>
	public class Msg_attitude : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Roll angle (rad, -pi..+pi)
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle (rad, -pi..+pi)
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle (rad, -pi..+pi)
		/// </summary>
		public float yaw;

		/// <summary>
		/// Roll angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Pitch angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Yaw angular speed (rad/s)
		/// </summary>
		public float yawspeed;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ATTITUDE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion.
	/// </summary>
	public class Msg_attitude_quaternion : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Quaternion component 1
		/// </summary>
		public float q1;

		/// <summary>
		/// Quaternion component 2
		/// </summary>
		public float q2;

		/// <summary>
		/// Quaternion component 3
		/// </summary>
		public float q3;

		/// <summary>
		/// Quaternion component 4
		/// </summary>
		public float q4;

		/// <summary>
		/// Roll angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Pitch angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Yaw angular speed (rad/s)
		/// </summary>
		public float yawspeed;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ATTITUDE_QUATERNION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
	/// </summary>
	public class Msg_local_position_ned : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X Position
		/// </summary>
		public float x;

		/// <summary>
		/// Y Position
		/// </summary>
		public float y;

		/// <summary>
		/// Z Position
		/// </summary>
		public float z;

		/// <summary>
		/// X Speed
		/// </summary>
		public float vx;

		/// <summary>
		/// Y Speed
		/// </summary>
		public float vy;

		/// <summary>
		/// Z Speed
		/// </summary>
		public float vz;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOCAL_POSITION_NED(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
	///               is designed as scaled integer message since the resolution of float is not sufficient.
	/// </summary>
	public class Msg_global_position_int : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Latitude, expressed as * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude, expressed as * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude in meters, expressed as * 1000 (millimeters), above MSL
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// Altitude above ground in meters, expressed as * 1000 (millimeters)
		/// </summary>
		public Int32 relative_alt;

		/// <summary>
		/// Ground X Speed (Latitude), expressed as m/s * 100
		/// </summary>
		public Int16 vx;

		/// <summary>
		/// Ground Y Speed (Longitude), expressed as m/s * 100
		/// </summary>
		public Int16 vy;

		/// <summary>
		/// Ground Z Speed (Altitude), expressed as m/s * 100
		/// </summary>
		public Int16 vz;

		/// <summary>
		/// Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 hdg;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GLOBAL_POSITION_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The scaled values of the RC channels received. (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to UINT16_MAX.
	/// </summary>
	public class Msg_rc_channels_scaled : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows for more than 8 servos.
		/// </summary>
		public byte port;

		/// <summary>
		/// RC channel 1 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan1_scaled;

		/// <summary>
		/// RC channel 2 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan2_scaled;

		/// <summary>
		/// RC channel 3 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan3_scaled;

		/// <summary>
		/// RC channel 4 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan4_scaled;

		/// <summary>
		/// RC channel 5 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan5_scaled;

		/// <summary>
		/// RC channel 6 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan6_scaled;

		/// <summary>
		/// RC channel 7 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan7_scaled;

		/// <summary>
		/// RC channel 8 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan8_scaled;

		/// <summary>
		/// Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
		/// </summary>
		public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RC_CHANNELS_SCALED(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
	/// </summary>
	public class Msg_rc_channels_raw : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows for more than 8 servos.
		/// </summary>
		public byte port;

		/// <summary>
		/// RC channel 1 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan1_raw;

		/// <summary>
		/// RC channel 2 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan2_raw;

		/// <summary>
		/// RC channel 3 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan3_raw;

		/// <summary>
		/// RC channel 4 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan4_raw;

		/// <summary>
		/// RC channel 5 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan5_raw;

		/// <summary>
		/// RC channel 6 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan6_raw;

		/// <summary>
		/// RC channel 7 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan7_raw;

		/// <summary>
		/// RC channel 8 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan8_raw;

		/// <summary>
		/// Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
		/// </summary>
		public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RC_CHANNELS_RAW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
	/// </summary>
	public class Msg_servo_output_raw : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since system boot)
		/// </summary>
		public UInt32 time_usec;

		/// <summary>
		/// Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows to encode more than 8 servos.
		/// </summary>
		public byte port;

		/// <summary>
		/// Servo output 1 value, in microseconds
		/// </summary>
		public UInt16 servo1_raw;

		/// <summary>
		/// Servo output 2 value, in microseconds
		/// </summary>
		public UInt16 servo2_raw;

		/// <summary>
		/// Servo output 3 value, in microseconds
		/// </summary>
		public UInt16 servo3_raw;

		/// <summary>
		/// Servo output 4 value, in microseconds
		/// </summary>
		public UInt16 servo4_raw;

		/// <summary>
		/// Servo output 5 value, in microseconds
		/// </summary>
		public UInt16 servo5_raw;

		/// <summary>
		/// Servo output 6 value, in microseconds
		/// </summary>
		public UInt16 servo6_raw;

		/// <summary>
		/// Servo output 7 value, in microseconds
		/// </summary>
		public UInt16 servo7_raw;

		/// <summary>
		/// Servo output 8 value, in microseconds
		/// </summary>
		public UInt16 servo8_raw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SERVO_OUTPUT_RAW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a partial list of mission items from the system/component. http://qgroundcontrol.org/mavlink/waypoint_protocol. If start and end index are the same, just send one waypoint.
	/// </summary>
	public class Msg_mission_request_partial_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Start index, 0 by default
		/// </summary>
		public Int16 start_index;

		/// <summary>
		/// End index, -1 by default (-1: send list to end). Else a valid index of the list
		/// </summary>
		public Int16 end_index;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_REQUEST_PARTIAL_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!
	/// </summary>
	public class Msg_mission_write_partial_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Start index, 0 by default and smaller / equal to the largest index of the current onboard list.
		/// </summary>
		public Int16 start_index;

		/// <summary>
		/// End index, equal or greater than start index.
		/// </summary>
		public Int16 end_index;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_WRITE_PARTIAL_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message encoding a mission item. This message is emitted to announce
	///                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also http://qgroundcontrol.org/mavlink/waypoint_protocol.
	/// </summary>
	public class Msg_mission_item : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

		/// <summary>
		/// The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
		/// </summary>
		public byte frame;

		/// <summary>
		/// The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
		/// </summary>
		public UInt16 command;

		/// <summary>
		/// false:0, true:1
		/// </summary>
		public byte current;

		/// <summary>
		/// autocontinue to next wp
		/// </summary>
		public byte autocontinue;

		/// <summary>
		/// PARAM1, see MAV_CMD enum
		/// </summary>
		public float param1;

		/// <summary>
		/// PARAM2, see MAV_CMD enum
		/// </summary>
		public float param2;

		/// <summary>
		/// PARAM3, see MAV_CMD enum
		/// </summary>
		public float param3;

		/// <summary>
		/// PARAM4, see MAV_CMD enum
		/// </summary>
		public float param4;

		/// <summary>
		/// PARAM5 / local: x position, global: latitude
		/// </summary>
		public float x;

		/// <summary>
		/// PARAM6 / y position: global: longitude
		/// </summary>
		public float y;

		/// <summary>
		/// PARAM7 / z position: global: altitude (relative or absolute, depending on frame.
		/// </summary>
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_ITEM(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. http://qgroundcontrol.org/mavlink/waypoint_protocol
	/// </summary>
	public class Msg_mission_request : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_REQUEST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
	/// </summary>
	public class Msg_mission_set_current : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_SET_CURRENT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message that announces the sequence number of the current active mission item. The MAV will fly towards this mission item.
	/// </summary>
	public class Msg_mission_current : MavlinkMessage
    {

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_CURRENT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request the overall list of mission items from the system/component.
	/// </summary>
	public class Msg_mission_request_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_REQUEST_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of MISSIONs.
	/// </summary>
	public class Msg_mission_count : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Number of mission items in the sequence
		/// </summary>
		public UInt16 count;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_COUNT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Delete all mission items at once.
	/// </summary>
	public class Msg_mission_clear_all : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_CLEAR_ALL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next MISSION.
	/// </summary>
	public class Msg_mission_item_reached : MavlinkMessage
    {

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_ITEM_REACHED(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Ack message during MISSION handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).
	/// </summary>
	public class Msg_mission_ack : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// See MAV_MISSION_RESULT enum
		/// </summary>
		public byte type;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_ACK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// As local waypoints exist, the global MISSION reference allows to transform between the local coordinate frame and the global (GPS) coordinate frame. This can be necessary when e.g. in- and outdoor settings are connected and the MAV should move from in- to outdoor.
	/// </summary>
	public class Msg_set_gps_global_origin : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude (WGS84, in degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude (WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 altitude;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_GPS_GLOBAL_ORIGIN(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Once the MAV sets a new GPS-Local correspondence, this message announces the origin (0,0,0) position
	/// </summary>
	public class Msg_gps_global_origin : MavlinkMessage
    {

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude (WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 altitude;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_GLOBAL_ORIGIN(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the setpoint for a local position controller. This is the position in local coordinates the MAV should fly to. This message is sent by the path/MISSION planner to the onboard position controller. As some MAVs have a degree of freedom in yaw (e.g. all helicopters/quadrotors), the desired yaw angle is part of the message.
	/// </summary>
	public class Msg_set_local_position_setpoint : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Coordinate frame - valid values are only MAV_FRAME_LOCAL_NED or MAV_FRAME_LOCAL_ENU
		/// </summary>
		public byte coordinate_frame;

		/// <summary>
		/// x position
		/// </summary>
		public float x;

		/// <summary>
		/// y position
		/// </summary>
		public float y;

		/// <summary>
		/// z position
		/// </summary>
		public float z;

		/// <summary>
		/// Desired yaw angle
		/// </summary>
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_LOCAL_POSITION_SETPOINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Transmit the current local setpoint of the controller to other MAVs (collision avoidance) and to the GCS.
	/// </summary>
	public class Msg_local_position_setpoint : MavlinkMessage
    {

		/// <summary>
		/// Coordinate frame - valid values are only MAV_FRAME_LOCAL_NED or MAV_FRAME_LOCAL_ENU
		/// </summary>
		public byte coordinate_frame;

		/// <summary>
		/// x position
		/// </summary>
		public float x;

		/// <summary>
		/// y position
		/// </summary>
		public float y;

		/// <summary>
		/// z position
		/// </summary>
		public float z;

		/// <summary>
		/// Desired yaw angle
		/// </summary>
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOCAL_POSITION_SETPOINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Transmit the current local setpoint of the controller to other MAVs (collision avoidance) and to the GCS.
	/// </summary>
	public class Msg_global_position_setpoint_int : MavlinkMessage
    {

		/// <summary>
		/// Coordinate frame - valid values are only MAV_FRAME_GLOBAL or MAV_FRAME_GLOBAL_RELATIVE_ALT
		/// </summary>
		public byte coordinate_frame;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude (WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 altitude;

		/// <summary>
		/// Desired yaw angle in degrees * 100
		/// </summary>
		public Int16 yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GLOBAL_POSITION_SETPOINT_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the current global position setpoint.
	/// </summary>
	public class Msg_set_global_position_setpoint_int : MavlinkMessage
    {

		/// <summary>
		/// Coordinate frame - valid values are only MAV_FRAME_GLOBAL or MAV_FRAME_GLOBAL_RELATIVE_ALT
		/// </summary>
		public byte coordinate_frame;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude (WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 altitude;

		/// <summary>
		/// Desired yaw angle in degrees * 100
		/// </summary>
		public Int16 yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_GLOBAL_POSITION_SETPOINT_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/MISSIONs to accept and which to reject. Safety areas are often enforced by national or competition regulations.
	/// </summary>
	public class Msg_safety_set_allowed_area : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
		/// </summary>
		public byte frame;

		/// <summary>
		/// x position 1 / Latitude 1
		/// </summary>
		public float p1x;

		/// <summary>
		/// y position 1 / Longitude 1
		/// </summary>
		public float p1y;

		/// <summary>
		/// z position 1 / Altitude 1
		/// </summary>
		public float p1z;

		/// <summary>
		/// x position 2 / Latitude 2
		/// </summary>
		public float p2x;

		/// <summary>
		/// y position 2 / Longitude 2
		/// </summary>
		public float p2y;

		/// <summary>
		/// z position 2 / Altitude 2
		/// </summary>
		public float p2z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SAFETY_SET_ALLOWED_AREA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Read out the safety zone the MAV currently assumes.
	/// </summary>
	public class Msg_safety_allowed_area : MavlinkMessage
    {

		/// <summary>
		/// Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
		/// </summary>
		public byte frame;

		/// <summary>
		/// x position 1 / Latitude 1
		/// </summary>
		public float p1x;

		/// <summary>
		/// y position 1 / Longitude 1
		/// </summary>
		public float p1y;

		/// <summary>
		/// z position 1 / Altitude 1
		/// </summary>
		public float p1z;

		/// <summary>
		/// x position 2 / Latitude 2
		/// </summary>
		public float p2x;

		/// <summary>
		/// y position 2 / Longitude 2
		/// </summary>
		public float p2y;

		/// <summary>
		/// z position 2 / Altitude 2
		/// </summary>
		public float p2z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SAFETY_ALLOWED_AREA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set roll, pitch and yaw.
	/// </summary>
	public class Msg_set_roll_pitch_yaw_thrust : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Desired roll angle in radians
		/// </summary>
		public float roll;

		/// <summary>
		/// Desired pitch angle in radians
		/// </summary>
		public float pitch;

		/// <summary>
		/// Desired yaw angle in radians
		/// </summary>
		public float yaw;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1
		/// </summary>
		public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_ROLL_PITCH_YAW_THRUST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set roll, pitch and yaw.
	/// </summary>
	public class Msg_set_roll_pitch_yaw_speed_thrust : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Desired roll angular speed in rad/s
		/// </summary>
		public float roll_speed;

		/// <summary>
		/// Desired pitch angular speed in rad/s
		/// </summary>
		public float pitch_speed;

		/// <summary>
		/// Desired yaw angular speed in rad/s
		/// </summary>
		public float yaw_speed;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1
		/// </summary>
		public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_ROLL_PITCH_YAW_SPEED_THRUST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Setpoint in roll, pitch, yaw currently active on the system.
	/// </summary>
	public class Msg_roll_pitch_yaw_thrust_setpoint : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Desired roll angle in radians
		/// </summary>
		public float roll;

		/// <summary>
		/// Desired pitch angle in radians
		/// </summary>
		public float pitch;

		/// <summary>
		/// Desired yaw angle in radians
		/// </summary>
		public float yaw;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1
		/// </summary>
		public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ROLL_PITCH_YAW_THRUST_SETPOINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Setpoint in rollspeed, pitchspeed, yawspeed currently active on the system.
	/// </summary>
	public class Msg_roll_pitch_yaw_speed_thrust_setpoint : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Desired roll angular speed in rad/s
		/// </summary>
		public float roll_speed;

		/// <summary>
		/// Desired pitch angular speed in rad/s
		/// </summary>
		public float pitch_speed;

		/// <summary>
		/// Desired yaw angular speed in rad/s
		/// </summary>
		public float yaw_speed;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1
		/// </summary>
		public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Setpoint in the four motor speeds
	/// </summary>
	public class Msg_set_quad_motors_setpoint : MavlinkMessage
    {

		/// <summary>
		/// System ID of the system that should set these motor commands
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Front motor in + configuration, front left motor in x configuration
		/// </summary>
		public UInt16 motor_front_nw;

		/// <summary>
		/// Right motor in + configuration, front right motor in x configuration
		/// </summary>
		public UInt16 motor_right_ne;

		/// <summary>
		/// Back motor in + configuration, back right motor in x configuration
		/// </summary>
		public UInt16 motor_back_se;

		/// <summary>
		/// Left motor in + configuration, back left motor in x configuration
		/// </summary>
		public UInt16 motor_left_sw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_QUAD_MOTORS_SETPOINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Setpoint for up to four quadrotors in a group / wing
	/// </summary>
	public class Msg_set_quad_swarm_roll_pitch_yaw_thrust : MavlinkMessage
    {

		/// <summary>
		/// ID of the quadrotor group (0 - 255, up to 256 groups supported)
		/// </summary>
		public byte group;

		/// <summary>
		/// ID of the flight mode (0 - 255, up to 256 modes supported)
		/// </summary>
		public byte mode;

		/// <summary>
		/// Desired roll angle in radians +-PI (+-INT16_MAX)
		/// </summary>
		public Int16[] roll; // Array size 4

		/// <summary>
		/// Desired pitch angle in radians +-PI (+-INT16_MAX)
		/// </summary>
		public Int16[] pitch; // Array size 4

		/// <summary>
		/// Desired yaw angle in radians, scaled to int16 +-PI (+-INT16_MAX)
		/// </summary>
		public Int16[] yaw; // Array size 4

		/// <summary>
		/// Collective thrust, scaled to uint16 (0..UINT16_MAX)
		/// </summary>
		public UInt16[] thrust; // Array size 4

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Outputs of the APM navigation controller. The primary use of this message is to check the response and signs of the controller before actual flight and to assist with tuning controller parameters.
	/// </summary>
	public class Msg_nav_controller_output : MavlinkMessage
    {

		/// <summary>
		/// Current desired roll in degrees
		/// </summary>
		public float nav_roll;

		/// <summary>
		/// Current desired pitch in degrees
		/// </summary>
		public float nav_pitch;

		/// <summary>
		/// Current desired heading in degrees
		/// </summary>
		public Int16 nav_bearing;

		/// <summary>
		/// Bearing to current MISSION/target in degrees
		/// </summary>
		public Int16 target_bearing;

		/// <summary>
		/// Distance to active MISSION in meters
		/// </summary>
		public UInt16 wp_dist;

		/// <summary>
		/// Current altitude error in meters
		/// </summary>
		public float alt_error;

		/// <summary>
		/// Current airspeed error in meters/second
		/// </summary>
		public float aspd_error;

		/// <summary>
		/// Current crosstrack error on x-y plane in meters
		/// </summary>
		public float xtrack_error;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_NAV_CONTROLLER_OUTPUT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Setpoint for up to four quadrotors in a group / wing
	/// </summary>
	public class Msg_set_quad_swarm_led_roll_pitch_yaw_thrust : MavlinkMessage
    {

		/// <summary>
		/// ID of the quadrotor group (0 - 255, up to 256 groups supported)
		/// </summary>
		public byte group;

		/// <summary>
		/// ID of the flight mode (0 - 255, up to 256 modes supported)
		/// </summary>
		public byte mode;

		/// <summary>
		/// RGB red channel (0-255)
		/// </summary>
		public byte[] led_red; // Array size 4

		/// <summary>
		/// RGB green channel (0-255)
		/// </summary>
		public byte[] led_blue; // Array size 4

		/// <summary>
		/// RGB blue channel (0-255)
		/// </summary>
		public byte[] led_green; // Array size 4

		/// <summary>
		/// Desired roll angle in radians +-PI (+-INT16_MAX)
		/// </summary>
		public Int16[] roll; // Array size 4

		/// <summary>
		/// Desired pitch angle in radians +-PI (+-INT16_MAX)
		/// </summary>
		public Int16[] pitch; // Array size 4

		/// <summary>
		/// Desired yaw angle in radians, scaled to int16 +-PI (+-INT16_MAX)
		/// </summary>
		public Int16[] yaw; // Array size 4

		/// <summary>
		/// Collective thrust, scaled to uint16 (0..UINT16_MAX)
		/// </summary>
		public UInt16[] thrust; // Array size 4

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Corrects the systems state by adding an error correction term to the position and velocity, and by rotating the attitude by a correction angle.
	/// </summary>
	public class Msg_state_correction : MavlinkMessage
    {

		/// <summary>
		/// x position error
		/// </summary>
		public float xErr;

		/// <summary>
		/// y position error
		/// </summary>
		public float yErr;

		/// <summary>
		/// z position error
		/// </summary>
		public float zErr;

		/// <summary>
		/// roll error (radians)
		/// </summary>
		public float rollErr;

		/// <summary>
		/// pitch error (radians)
		/// </summary>
		public float pitchErr;

		/// <summary>
		/// yaw error (radians)
		/// </summary>
		public float yawErr;

		/// <summary>
		/// x velocity
		/// </summary>
		public float vxErr;

		/// <summary>
		/// y velocity
		/// </summary>
		public float vyErr;

		/// <summary>
		/// z velocity
		/// </summary>
		public float vzErr;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_STATE_CORRECTION(this, bytes, ref offset);
            }        
	}

	public class Msg_request_data_stream : MavlinkMessage
    {

		/// <summary>
		/// The target requested to send the message stream.
		/// </summary>
		public byte target_system;

		/// <summary>
		/// The target requested to send the message stream.
		/// </summary>
		public byte target_component;

		/// <summary>
		/// The ID of the requested data stream
		/// </summary>
		public byte req_stream_id;

		/// <summary>
		/// The requested interval between two messages of this type
		/// </summary>
		public UInt16 req_message_rate;

		/// <summary>
		/// 1 to start sending, 0 to stop sending.
		/// </summary>
		public byte start_stop;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_REQUEST_DATA_STREAM(this, bytes, ref offset);
            }        
	}

	public class Msg_data_stream : MavlinkMessage
    {

		/// <summary>
		/// The ID of the requested data stream
		/// </summary>
		public byte stream_id;

		/// <summary>
		/// The requested interval between two messages of this type
		/// </summary>
		public UInt16 message_rate;

		/// <summary>
		/// 1 stream is enabled, 0 stream is stopped.
		/// </summary>
		public byte on_off;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DATA_STREAM(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled an buttons are also transmit as boolean values of their 
	/// </summary>
	public class Msg_manual_control : MavlinkMessage
    {

		/// <summary>
		/// The system to be controlled.
		/// </summary>
		public byte target;

		/// <summary>
		/// X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.
		/// </summary>
		public Int16 x;

		/// <summary>
		/// Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.
		/// </summary>
		public Int16 y;

		/// <summary>
		/// Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle.
		/// </summary>
		public Int16 z;

		/// <summary>
		/// R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.
		/// </summary>
		public Int16 r;

		/// <summary>
		/// A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.
		/// </summary>
		public UInt16 buttons;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MANUAL_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW values of the RC channels sent to the MAV to override info received from the RC radio. A value of UINT16_MAX means no change to that channel. A value of 0 means control of that channel should be released back to the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
	/// </summary>
	public class Msg_rc_channels_override : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// RC channel 1 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan1_raw;

		/// <summary>
		/// RC channel 2 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan2_raw;

		/// <summary>
		/// RC channel 3 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan3_raw;

		/// <summary>
		/// RC channel 4 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan4_raw;

		/// <summary>
		/// RC channel 5 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan5_raw;

		/// <summary>
		/// RC channel 6 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan6_raw;

		/// <summary>
		/// RC channel 7 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan7_raw;

		/// <summary>
		/// RC channel 8 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan8_raw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RC_CHANNELS_OVERRIDE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Metrics typically displayed on a HUD for fixed wing aircraft
	/// </summary>
	public class Msg_vfr_hud : MavlinkMessage
    {

		/// <summary>
		/// Current airspeed in m/s
		/// </summary>
		public float airspeed;

		/// <summary>
		/// Current ground speed in m/s
		/// </summary>
		public float groundspeed;

		/// <summary>
		/// Current heading in degrees, in compass units (0..360, 0=north)
		/// </summary>
		public Int16 heading;

		/// <summary>
		/// Current throttle setting in integer percent, 0 to 100
		/// </summary>
		public UInt16 throttle;

		/// <summary>
		/// Current altitude (MSL), in meters
		/// </summary>
		public float alt;

		/// <summary>
		/// Current climb rate in meters/second
		/// </summary>
		public float climb;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VFR_HUD(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a command with up to seven parameters to the MAV
	/// </summary>
	public class Msg_command_long : MavlinkMessage
    {

		/// <summary>
		/// System which should execute the command
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component which should execute the command, 0 for all components
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Command ID, as defined by MAV_CMD enum.
		/// </summary>
		public UInt16 command;

		/// <summary>
		/// 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
		/// </summary>
		public byte confirmation;

		/// <summary>
		/// Parameter 1, as defined by MAV_CMD enum.
		/// </summary>
		public float param1;

		/// <summary>
		/// Parameter 2, as defined by MAV_CMD enum.
		/// </summary>
		public float param2;

		/// <summary>
		/// Parameter 3, as defined by MAV_CMD enum.
		/// </summary>
		public float param3;

		/// <summary>
		/// Parameter 4, as defined by MAV_CMD enum.
		/// </summary>
		public float param4;

		/// <summary>
		/// Parameter 5, as defined by MAV_CMD enum.
		/// </summary>
		public float param5;

		/// <summary>
		/// Parameter 6, as defined by MAV_CMD enum.
		/// </summary>
		public float param6;

		/// <summary>
		/// Parameter 7, as defined by MAV_CMD enum.
		/// </summary>
		public float param7;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_COMMAND_LONG(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Report status of a command. Includes feedback wether the command was executed.
	/// </summary>
	public class Msg_command_ack : MavlinkMessage
    {

		/// <summary>
		/// Command ID, as defined by MAV_CMD enum.
		/// </summary>
		public UInt16 command;

		/// <summary>
		/// See MAV_RESULT enum
		/// </summary>
		public byte result;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_COMMAND_ACK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Setpoint in roll, pitch, yaw rates and thrust currently active on the system.
	/// </summary>
	public class Msg_roll_pitch_yaw_rates_thrust_setpoint : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Desired roll rate in radians per second
		/// </summary>
		public float roll_rate;

		/// <summary>
		/// Desired pitch rate in radians per second
		/// </summary>
		public float pitch_rate;

		/// <summary>
		/// Desired yaw rate in radians per second
		/// </summary>
		public float yaw_rate;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1
		/// </summary>
		public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Setpoint in roll, pitch, yaw and thrust from the operator
	/// </summary>
	public class Msg_manual_setpoint : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Desired roll rate in radians per second
		/// </summary>
		public float roll;

		/// <summary>
		/// Desired pitch rate in radians per second
		/// </summary>
		public float pitch;

		/// <summary>
		/// Desired yaw rate in radians per second
		/// </summary>
		public float yaw;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1
		/// </summary>
		public float thrust;

		/// <summary>
		/// Flight mode switch position, 0.. 255
		/// </summary>
		public byte mode_switch;

		/// <summary>
		/// Override mode switch position, 0.. 255
		/// </summary>
		public byte manual_override_switch;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MANUAL_SETPOINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
	/// </summary>
	public class Msg_local_position_ned_system_global_offset : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X Position
		/// </summary>
		public float x;

		/// <summary>
		/// Y Position
		/// </summary>
		public float y;

		/// <summary>
		/// Z Position
		/// </summary>
		public float z;
		public float roll;
		public float pitch;
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// DEPRECATED PACKET! Suffers from missing airspeed fields and singularities due to Euler angles. Please use HIL_STATE_QUATERNION instead. Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
	/// </summary>
	public class Msg_hil_state : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Roll angle (rad)
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle (rad)
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle (rad)
		/// </summary>
		public float yaw;

		/// <summary>
		/// Body frame roll / phi angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Body frame pitch / theta angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Body frame yaw / psi angular speed (rad/s)
		/// </summary>
		public float yawspeed;

		/// <summary>
		/// Latitude, expressed as * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude, expressed as * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude in meters, expressed as * 1000 (millimeters)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// Ground X Speed (Latitude), expressed as m/s * 100
		/// </summary>
		public Int16 vx;

		/// <summary>
		/// Ground Y Speed (Longitude), expressed as m/s * 100
		/// </summary>
		public Int16 vy;

		/// <summary>
		/// Ground Z Speed (Altitude), expressed as m/s * 100
		/// </summary>
		public Int16 vz;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_STATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sent from autopilot to simulation. Hardware in the loop control outputs
	/// </summary>
	public class Msg_hil_controls : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Control output -1 .. 1
		/// </summary>
		public float roll_ailerons;

		/// <summary>
		/// Control output -1 .. 1
		/// </summary>
		public float pitch_elevator;

		/// <summary>
		/// Control output -1 .. 1
		/// </summary>
		public float yaw_rudder;

		/// <summary>
		/// Throttle 0 .. 1
		/// </summary>
		public float throttle;

		/// <summary>
		/// Aux 1, -1 .. 1
		/// </summary>
		public float aux1;

		/// <summary>
		/// Aux 2, -1 .. 1
		/// </summary>
		public float aux2;

		/// <summary>
		/// Aux 3, -1 .. 1
		/// </summary>
		public float aux3;

		/// <summary>
		/// Aux 4, -1 .. 1
		/// </summary>
		public float aux4;

		/// <summary>
		/// System mode (MAV_MODE)
		/// </summary>
		public byte mode;

		/// <summary>
		/// Navigation mode (MAV_NAV_MODE)
		/// </summary>
		public byte nav_mode;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_CONTROLS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
	/// </summary>
	public class Msg_hil_rc_inputs_raw : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// RC channel 1 value, in microseconds
		/// </summary>
		public UInt16 chan1_raw;

		/// <summary>
		/// RC channel 2 value, in microseconds
		/// </summary>
		public UInt16 chan2_raw;

		/// <summary>
		/// RC channel 3 value, in microseconds
		/// </summary>
		public UInt16 chan3_raw;

		/// <summary>
		/// RC channel 4 value, in microseconds
		/// </summary>
		public UInt16 chan4_raw;

		/// <summary>
		/// RC channel 5 value, in microseconds
		/// </summary>
		public UInt16 chan5_raw;

		/// <summary>
		/// RC channel 6 value, in microseconds
		/// </summary>
		public UInt16 chan6_raw;

		/// <summary>
		/// RC channel 7 value, in microseconds
		/// </summary>
		public UInt16 chan7_raw;

		/// <summary>
		/// RC channel 8 value, in microseconds
		/// </summary>
		public UInt16 chan8_raw;

		/// <summary>
		/// RC channel 9 value, in microseconds
		/// </summary>
		public UInt16 chan9_raw;

		/// <summary>
		/// RC channel 10 value, in microseconds
		/// </summary>
		public UInt16 chan10_raw;

		/// <summary>
		/// RC channel 11 value, in microseconds
		/// </summary>
		public UInt16 chan11_raw;

		/// <summary>
		/// RC channel 12 value, in microseconds
		/// </summary>
		public UInt16 chan12_raw;

		/// <summary>
		/// Receive signal strength indicator, 0: 0%, 255: 100%
		/// </summary>
		public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_RC_INPUTS_RAW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Optical flow from a flow sensor (e.g. optical mouse sensor)
	/// </summary>
	public class Msg_optical_flow : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (UNIX)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Sensor ID
		/// </summary>
		public byte sensor_id;

		/// <summary>
		/// Flow in pixels * 10 in x-sensor direction (dezi-pixels)
		/// </summary>
		public Int16 flow_x;

		/// <summary>
		/// Flow in pixels * 10 in y-sensor direction (dezi-pixels)
		/// </summary>
		public Int16 flow_y;

		/// <summary>
		/// Flow in meters in x-sensor direction, angular-speed compensated
		/// </summary>
		public float flow_comp_m_x;

		/// <summary>
		/// Flow in meters in y-sensor direction, angular-speed compensated
		/// </summary>
		public float flow_comp_m_y;

		/// <summary>
		/// Optical flow quality / confidence. 0: bad, 255: maximum quality
		/// </summary>
		public byte quality;

		/// <summary>
		/// Ground distance in meters. Positive value: distance known. Negative value: Unknown distance
		/// </summary>
		public float ground_distance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_OPTICAL_FLOW(this, bytes, ref offset);
            }        
	}

	public class Msg_global_vision_position_estimate : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 usec;

		/// <summary>
		/// Global X position
		/// </summary>
		public float x;

		/// <summary>
		/// Global Y position
		/// </summary>
		public float y;

		/// <summary>
		/// Global Z position
		/// </summary>
		public float z;

		/// <summary>
		/// Roll angle in rad
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle in rad
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle in rad
		/// </summary>
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GLOBAL_VISION_POSITION_ESTIMATE(this, bytes, ref offset);
            }        
	}

	public class Msg_vision_position_estimate : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 usec;

		/// <summary>
		/// Global X position
		/// </summary>
		public float x;

		/// <summary>
		/// Global Y position
		/// </summary>
		public float y;

		/// <summary>
		/// Global Z position
		/// </summary>
		public float z;

		/// <summary>
		/// Roll angle in rad
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle in rad
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle in rad
		/// </summary>
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VISION_POSITION_ESTIMATE(this, bytes, ref offset);
            }        
	}

	public class Msg_vision_speed_estimate : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 usec;

		/// <summary>
		/// Global X speed
		/// </summary>
		public float x;

		/// <summary>
		/// Global Y speed
		/// </summary>
		public float y;

		/// <summary>
		/// Global Z speed
		/// </summary>
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VISION_SPEED_ESTIMATE(this, bytes, ref offset);
            }        
	}

	public class Msg_vicon_position_estimate : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 usec;

		/// <summary>
		/// Global X position
		/// </summary>
		public float x;

		/// <summary>
		/// Global Y position
		/// </summary>
		public float y;

		/// <summary>
		/// Global Z position
		/// </summary>
		public float z;

		/// <summary>
		/// Roll angle in rad
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle in rad
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle in rad
		/// </summary>
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VICON_POSITION_ESTIMATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The IMU readings in SI units in NED body frame
	/// </summary>
	public class Msg_highres_imu : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// X acceleration (m/s^2)
		/// </summary>
		public float xacc;

		/// <summary>
		/// Y acceleration (m/s^2)
		/// </summary>
		public float yacc;

		/// <summary>
		/// Z acceleration (m/s^2)
		/// </summary>
		public float zacc;

		/// <summary>
		/// Angular speed around X axis (rad / sec)
		/// </summary>
		public float xgyro;

		/// <summary>
		/// Angular speed around Y axis (rad / sec)
		/// </summary>
		public float ygyro;

		/// <summary>
		/// Angular speed around Z axis (rad / sec)
		/// </summary>
		public float zgyro;

		/// <summary>
		/// X Magnetic field (Gauss)
		/// </summary>
		public float xmag;

		/// <summary>
		/// Y Magnetic field (Gauss)
		/// </summary>
		public float ymag;

		/// <summary>
		/// Z Magnetic field (Gauss)
		/// </summary>
		public float zmag;

		/// <summary>
		/// Absolute pressure in millibar
		/// </summary>
		public float abs_pressure;

		/// <summary>
		/// Differential pressure in millibar
		/// </summary>
		public float diff_pressure;

		/// <summary>
		/// Altitude calculated from pressure
		/// </summary>
		public float pressure_alt;

		/// <summary>
		/// Temperature in degrees celsius
		/// </summary>
		public float temperature;

		/// <summary>
		/// Bitmask for fields that have updated since last message, bit 0 = xacc, bit 12: temperature
		/// </summary>
		public UInt16 fields_updated;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIGHRES_IMU(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Optical flow from an omnidirectional flow sensor (e.g. PX4FLOW with wide angle lens)
	/// </summary>
	public class Msg_omnidirectional_flow : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Sensor ID
		/// </summary>
		public byte sensor_id;

		/// <summary>
		/// Flow in deci pixels (1 = 0.1 pixel) on left hemisphere
		/// </summary>
		public Int16[] left; // Array size 10

		/// <summary>
		/// Flow in deci pixels (1 = 0.1 pixel) on right hemisphere
		/// </summary>
		public Int16[] right; // Array size 10

		/// <summary>
		/// Optical flow quality / confidence. 0: bad, 255: maximum quality
		/// </summary>
		public byte quality;

		/// <summary>
		/// Front distance in meters. Positive value (including zero): distance known. Negative value: Unknown distance
		/// </summary>
		public float front_distance_m;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_OMNIDIRECTIONAL_FLOW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The IMU readings in SI units in NED body frame
	/// </summary>
	public class Msg_hil_sensor : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// X acceleration (m/s^2)
		/// </summary>
		public float xacc;

		/// <summary>
		/// Y acceleration (m/s^2)
		/// </summary>
		public float yacc;

		/// <summary>
		/// Z acceleration (m/s^2)
		/// </summary>
		public float zacc;

		/// <summary>
		/// Angular speed around X axis in body frame (rad / sec)
		/// </summary>
		public float xgyro;

		/// <summary>
		/// Angular speed around Y axis in body frame (rad / sec)
		/// </summary>
		public float ygyro;

		/// <summary>
		/// Angular speed around Z axis in body frame (rad / sec)
		/// </summary>
		public float zgyro;

		/// <summary>
		/// X Magnetic field (Gauss)
		/// </summary>
		public float xmag;

		/// <summary>
		/// Y Magnetic field (Gauss)
		/// </summary>
		public float ymag;

		/// <summary>
		/// Z Magnetic field (Gauss)
		/// </summary>
		public float zmag;

		/// <summary>
		/// Absolute pressure in millibar
		/// </summary>
		public float abs_pressure;

		/// <summary>
		/// Differential pressure (airspeed) in millibar
		/// </summary>
		public float diff_pressure;

		/// <summary>
		/// Altitude calculated from pressure
		/// </summary>
		public float pressure_alt;

		/// <summary>
		/// Temperature in degrees celsius
		/// </summary>
		public float temperature;

		/// <summary>
		/// Bitmask for fields that have updated since last message, bit 0 = xacc, bit 12: temperature
		/// </summary>
		public UInt32 fields_updated;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_SENSOR(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of simulation environment, if used
	/// </summary>
	public class Msg_sim_state : MavlinkMessage
    {

		/// <summary>
		/// True attitude quaternion component 1
		/// </summary>
		public float q1;

		/// <summary>
		/// True attitude quaternion component 2
		/// </summary>
		public float q2;

		/// <summary>
		/// True attitude quaternion component 3
		/// </summary>
		public float q3;

		/// <summary>
		/// True attitude quaternion component 4
		/// </summary>
		public float q4;

		/// <summary>
		/// Attitude roll expressed as Euler angles, not recommended except for human-readable outputs
		/// </summary>
		public float roll;

		/// <summary>
		/// Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs
		/// </summary>
		public float pitch;

		/// <summary>
		/// Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs
		/// </summary>
		public float yaw;

		/// <summary>
		/// X acceleration m/s/s
		/// </summary>
		public float xacc;

		/// <summary>
		/// Y acceleration m/s/s
		/// </summary>
		public float yacc;

		/// <summary>
		/// Z acceleration m/s/s
		/// </summary>
		public float zacc;

		/// <summary>
		/// Angular speed around X axis rad/s
		/// </summary>
		public float xgyro;

		/// <summary>
		/// Angular speed around Y axis rad/s
		/// </summary>
		public float ygyro;

		/// <summary>
		/// Angular speed around Z axis rad/s
		/// </summary>
		public float zgyro;

		/// <summary>
		/// Latitude in degrees
		/// </summary>
		public float lat;

		/// <summary>
		/// Longitude in degrees
		/// </summary>
		public float lon;

		/// <summary>
		/// Altitude in meters
		/// </summary>
		public float alt;

		/// <summary>
		/// Horizontal position standard deviation
		/// </summary>
		public float std_dev_horz;

		/// <summary>
		/// Vertical position standard deviation
		/// </summary>
		public float std_dev_vert;

		/// <summary>
		/// True velocity in m/s in NORTH direction in earth-fixed NED frame
		/// </summary>
		public float vn;

		/// <summary>
		/// True velocity in m/s in EAST direction in earth-fixed NED frame
		/// </summary>
		public float ve;

		/// <summary>
		/// True velocity in m/s in DOWN direction in earth-fixed NED frame
		/// </summary>
		public float vd;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SIM_STATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status generated by radio
	/// </summary>
	public class Msg_radio_status : MavlinkMessage
    {

		/// <summary>
		/// local signal strength
		/// </summary>
		public byte rssi;

		/// <summary>
		/// remote signal strength
		/// </summary>
		public byte remrssi;

		/// <summary>
		/// how full the tx buffer is as a percentage
		/// </summary>
		public byte txbuf;

		/// <summary>
		/// background noise level
		/// </summary>
		public byte noise;

		/// <summary>
		/// remote background noise level
		/// </summary>
		public byte remnoise;

		/// <summary>
		/// receive errors
		/// </summary>
		public UInt16 rxerrors;

		/// <summary>
		/// count of error corrected packets
		/// </summary>
		public UInt16 @fixed;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RADIO_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Begin file transfer
	/// </summary>
	public class Msg_file_transfer_start : MavlinkMessage
    {

		/// <summary>
		/// Unique transfer ID
		/// </summary>
		public UInt64 transfer_uid;

		/// <summary>
		/// Destination path
		/// </summary>
		public byte[] dest_path; // Array size 240

		/// <summary>
		/// Transfer direction: 0: from requester, 1: to requester
		/// </summary>
		public byte direction;

		/// <summary>
		/// File size in bytes
		/// </summary>
		public UInt32 file_size;

		/// <summary>
		/// RESERVED
		/// </summary>
		public byte flags;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_FILE_TRANSFER_START(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Get directory listing
	/// </summary>
	public class Msg_file_transfer_dir_list : MavlinkMessage
    {

		/// <summary>
		/// Unique transfer ID
		/// </summary>
		public UInt64 transfer_uid;

		/// <summary>
		/// Directory path to list
		/// </summary>
		public byte[] dir_path; // Array size 240

		/// <summary>
		/// RESERVED
		/// </summary>
		public byte flags;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_FILE_TRANSFER_DIR_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// File transfer result
	/// </summary>
	public class Msg_file_transfer_res : MavlinkMessage
    {

		/// <summary>
		/// Unique transfer ID
		/// </summary>
		public UInt64 transfer_uid;

		/// <summary>
		/// 0: OK, 1: not permitted, 2: bad path / file name, 3: no space left on device
		/// </summary>
		public byte result;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_FILE_TRANSFER_RES(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The global position, as returned by the Global Positioning System (GPS). This is
	///                 NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).
	/// </summary>
	public class Msg_hil_gps : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
		/// </summary>
		public byte fix_type;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude (WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: 65535
		/// </summary>
		public UInt16 eph;

		/// <summary>
		/// GPS VDOP vertical dilution of position in cm (m*100). If unknown, set to: 65535
		/// </summary>
		public UInt16 epv;

		/// <summary>
		/// GPS ground speed (m/s * 100). If unknown, set to: 65535
		/// </summary>
		public UInt16 vel;

		/// <summary>
		/// GPS velocity in cm/s in NORTH direction in earth-fixed NED frame
		/// </summary>
		public Int16 vn;

		/// <summary>
		/// GPS velocity in cm/s in EAST direction in earth-fixed NED frame
		/// </summary>
		public Int16 ve;

		/// <summary>
		/// GPS velocity in cm/s in DOWN direction in earth-fixed NED frame
		/// </summary>
		public Int16 vd;

		/// <summary>
		/// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: 65535
		/// </summary>
		public UInt16 cog;

		/// <summary>
		/// Number of satellites visible. If unknown, set to 255
		/// </summary>
		public byte satellites_visible;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_GPS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Simulated optical flow from a flow sensor (e.g. optical mouse sensor)
	/// </summary>
	public class Msg_hil_optical_flow : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (UNIX)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Sensor ID
		/// </summary>
		public byte sensor_id;

		/// <summary>
		/// Flow in pixels in x-sensor direction
		/// </summary>
		public Int16 flow_x;

		/// <summary>
		/// Flow in pixels in y-sensor direction
		/// </summary>
		public Int16 flow_y;

		/// <summary>
		/// Flow in meters in x-sensor direction, angular-speed compensated
		/// </summary>
		public float flow_comp_m_x;

		/// <summary>
		/// Flow in meters in y-sensor direction, angular-speed compensated
		/// </summary>
		public float flow_comp_m_y;

		/// <summary>
		/// Optical flow quality / confidence. 0: bad, 255: maximum quality
		/// </summary>
		public byte quality;

		/// <summary>
		/// Ground distance in meters. Positive value: distance known. Negative value: Unknown distance
		/// </summary>
		public float ground_distance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_OPTICAL_FLOW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.
	/// </summary>
	public class Msg_hil_state_quaternion : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Vehicle attitude expressed as normalized quaternion
		/// </summary>
		public float[] attitude_quaternion; // Array size 4

		/// <summary>
		/// Body frame roll / phi angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Body frame pitch / theta angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Body frame yaw / psi angular speed (rad/s)
		/// </summary>
		public float yawspeed;

		/// <summary>
		/// Latitude, expressed as * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude, expressed as * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude in meters, expressed as * 1000 (millimeters)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// Ground X Speed (Latitude), expressed as m/s * 100
		/// </summary>
		public Int16 vx;

		/// <summary>
		/// Ground Y Speed (Longitude), expressed as m/s * 100
		/// </summary>
		public Int16 vy;

		/// <summary>
		/// Ground Z Speed (Altitude), expressed as m/s * 100
		/// </summary>
		public Int16 vz;

		/// <summary>
		/// Indicated airspeed, expressed as m/s * 100
		/// </summary>
		public UInt16 ind_airspeed;

		/// <summary>
		/// True airspeed, expressed as m/s * 100
		/// </summary>
		public UInt16 true_airspeed;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_STATE_QUATERNION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units
	/// </summary>
	public class Msg_scaled_imu2 : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

		/// <summary>
		/// Angular speed around X axis (millirad /sec)
		/// </summary>
		public Int16 xgyro;

		/// <summary>
		/// Angular speed around Y axis (millirad /sec)
		/// </summary>
		public Int16 ygyro;

		/// <summary>
		/// Angular speed around Z axis (millirad /sec)
		/// </summary>
		public Int16 zgyro;

		/// <summary>
		/// X Magnetic field (milli tesla)
		/// </summary>
		public Int16 xmag;

		/// <summary>
		/// Y Magnetic field (milli tesla)
		/// </summary>
		public Int16 ymag;

		/// <summary>
		/// Z Magnetic field (milli tesla)
		/// </summary>
		public Int16 zmag;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_IMU2(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called.
	/// </summary>
	public class Msg_log_request_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// First log id (0 for first available)
		/// </summary>
		public UInt16 start;

		/// <summary>
		/// Last log id (0xffff for last available)
		/// </summary>
		public UInt16 end;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_REQUEST_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reply to LOG_REQUEST_LIST
	/// </summary>
	public class Msg_log_entry : MavlinkMessage
    {

		/// <summary>
		/// Log id
		/// </summary>
		public UInt16 id;

		/// <summary>
		/// Total number of logs
		/// </summary>
		public UInt16 num_logs;

		/// <summary>
		/// High log number
		/// </summary>
		public UInt16 last_log_num;

		/// <summary>
		/// UTC timestamp of log in seconds since 1970, or 0 if not available
		/// </summary>
		public UInt32 time_utc;

		/// <summary>
		/// Size of the log (may be approximate) in bytes
		/// </summary>
		public UInt32 size;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_ENTRY(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a chunk of a log
	/// </summary>
	public class Msg_log_request_data : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Log id (from LOG_ENTRY reply)
		/// </summary>
		public UInt16 id;

		/// <summary>
		/// Offset into the log
		/// </summary>
		public UInt32 ofs;

		/// <summary>
		/// Number of bytes
		/// </summary>
		public UInt32 count;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_REQUEST_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reply to LOG_REQUEST_DATA
	/// </summary>
	public class Msg_log_data : MavlinkMessage
    {

		/// <summary>
		/// Log id (from LOG_ENTRY reply)
		/// </summary>
		public UInt16 id;

		/// <summary>
		/// Offset into the log
		/// </summary>
		public UInt32 ofs;

		/// <summary>
		/// Number of bytes (zero for end of log)
		/// </summary>
		public byte count;

		/// <summary>
		/// log data
		/// </summary>
		public byte[] data; // Array size 90

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Erase all logs
	/// </summary>
	public class Msg_log_erase : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_ERASE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Stop log transfer and resume normal logging
	/// </summary>
	public class Msg_log_request_end : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_REQUEST_END(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// data for injecting into the onboard GPS (used for DGPS)
	/// </summary>
	public class Msg_gps_inject_data : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// data length
		/// </summary>
		public byte len;

		/// <summary>
		/// raw data (110 is enough for 12 satellites of RTCMv2)
		/// </summary>
		public byte[] data; // Array size 110

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_INJECT_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Second GPS data. Coordinate frame is right-handed, Z-axis up (GPS frame).
	/// </summary>
	public class Msg_gps2_raw : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
		/// </summary>
		public byte fix_type;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude (WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 eph;

		/// <summary>
		/// GPS VDOP vertical dilution of position in cm (m*100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 epv;

		/// <summary>
		/// GPS ground speed (m/s * 100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 vel;

		/// <summary>
		/// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 cog;

		/// <summary>
		/// Number of satellites visible. If unknown, set to 255
		/// </summary>
		public byte satellites_visible;

		/// <summary>
		/// Number of DGPS satellites
		/// </summary>
		public byte dgps_numch;

		/// <summary>
		/// Age of DGPS info
		/// </summary>
		public UInt32 dgps_age;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS2_RAW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Power supply status
	/// </summary>
	public class Msg_power_status : MavlinkMessage
    {

		/// <summary>
		/// 5V rail voltage in millivolts
		/// </summary>
		public UInt16 Vcc;

		/// <summary>
		/// servo rail voltage in millivolts
		/// </summary>
		public UInt16 Vservo;

		/// <summary>
		/// power supply status flags (see MAV_POWER_STATUS enum)
		/// </summary>
		public UInt16 flags;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_POWER_STATUS(this, bytes, ref offset);
            }        
	}

	public class Msg_data_transmission_handshake : MavlinkMessage
    {

		/// <summary>
		/// type of requested/acknowledged data (as defined in ENUM DATA_TYPES in mavlink/include/mavlink_types.h)
		/// </summary>
		public byte type;

		/// <summary>
		/// total data size in bytes (set on ACK only)
		/// </summary>
		public UInt32 size;

		/// <summary>
		/// Width of a matrix or image
		/// </summary>
		public UInt16 width;

		/// <summary>
		/// Height of a matrix or image
		/// </summary>
		public UInt16 height;

		/// <summary>
		/// number of packets beeing sent (set on ACK only)
		/// </summary>
		public UInt16 packets;

		/// <summary>
		/// payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only)
		/// </summary>
		public byte payload;

		/// <summary>
		/// JPEG quality out of [1,100]
		/// </summary>
		public byte jpg_quality;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DATA_TRANSMISSION_HANDSHAKE(this, bytes, ref offset);
            }        
	}

	public class Msg_encapsulated_data : MavlinkMessage
    {

		/// <summary>
		/// sequence number (starting with 0 on every transmission)
		/// </summary>
		public UInt16 seqnr;

		/// <summary>
		/// image data bytes
		/// </summary>
		public byte[] data; // Array size 253

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ENCAPSULATED_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Transmitte battery informations for a accu pack.
	/// </summary>
	public class Msg_battery_status : MavlinkMessage
    {

		/// <summary>
		/// Accupack ID
		/// </summary>
		public byte accu_id;

		/// <summary>
		/// Battery voltage of cell 1, in millivolts (1 = 1 millivolt)
		/// </summary>
		public UInt16 voltage_cell_1;

		/// <summary>
		/// Battery voltage of cell 2, in millivolts (1 = 1 millivolt), -1: no cell
		/// </summary>
		public UInt16 voltage_cell_2;

		/// <summary>
		/// Battery voltage of cell 3, in millivolts (1 = 1 millivolt), -1: no cell
		/// </summary>
		public UInt16 voltage_cell_3;

		/// <summary>
		/// Battery voltage of cell 4, in millivolts (1 = 1 millivolt), -1: no cell
		/// </summary>
		public UInt16 voltage_cell_4;

		/// <summary>
		/// Battery voltage of cell 5, in millivolts (1 = 1 millivolt), -1: no cell
		/// </summary>
		public UInt16 voltage_cell_5;

		/// <summary>
		/// Battery voltage of cell 6, in millivolts (1 = 1 millivolt), -1: no cell
		/// </summary>
		public UInt16 voltage_cell_6;

		/// <summary>
		/// Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current
		/// </summary>
		public Int16 current_battery;

		/// <summary>
		/// Consumed charge, in milliampere hours (1 = 1 mAh), -1: autopilot does not provide mAh consumption estimate
		/// </summary>
		public Int32 current_consumed;

		/// <summary>
		/// Consumed energy, in 100*Joules (intergrated U*I*dt)  (1 = 100 Joule), -1: autopilot does not provide energy consumption estimate
		/// </summary>
		public Int32 energy_consumed;

		/// <summary>
		/// Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot does not estimate the remaining battery
		/// </summary>
		public sbyte battery_remaining;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_BATTERY_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the 8 DOF setpoint for a controller.
	/// </summary>
	public class Msg_setpoint_8dof : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Value 1
		/// </summary>
		public float val1;

		/// <summary>
		/// Value 2
		/// </summary>
		public float val2;

		/// <summary>
		/// Value 3
		/// </summary>
		public float val3;

		/// <summary>
		/// Value 4
		/// </summary>
		public float val4;

		/// <summary>
		/// Value 5
		/// </summary>
		public float val5;

		/// <summary>
		/// Value 6
		/// </summary>
		public float val6;

		/// <summary>
		/// Value 7
		/// </summary>
		public float val7;

		/// <summary>
		/// Value 8
		/// </summary>
		public float val8;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SETPOINT_8DOF(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the 6 DOF setpoint for a attitude and position controller.
	/// </summary>
	public class Msg_setpoint_6dof : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Translational Component in x
		/// </summary>
		public float trans_x;

		/// <summary>
		/// Translational Component in y
		/// </summary>
		public float trans_y;

		/// <summary>
		/// Translational Component in z
		/// </summary>
		public float trans_z;

		/// <summary>
		/// Rotational Component in x
		/// </summary>
		public float rot_x;

		/// <summary>
		/// Rotational Component in y
		/// </summary>
		public float rot_y;

		/// <summary>
		/// Rotational Component in z
		/// </summary>
		public float rot_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SETPOINT_6DOF(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Unibo parameters
	/// </summary>
	public class Msg_unibo_parameters : MavlinkMessage
    {

		/// <summary>
		/// 
		/// </summary>
		public float Offset_T;

		/// <summary>
		/// 
		/// </summary>
		public float lat_mode;

		/// <summary>
		/// 
		/// </summary>
		public float delta;

		/// <summary>
		/// 
		/// </summary>
		public float K1;

		/// <summary>
		/// 
		/// </summary>
		public float L1;

		/// <summary>
		/// 
		/// </summary>
		public float Ixy;

		/// <summary>
		/// 
		/// </summary>
		public float K2;

		/// <summary>
		/// 
		/// </summary>
		public float L2;

		/// <summary>
		/// 
		/// </summary>
		public float Iz;

		/// <summary>
		/// 
		/// </summary>
		public float KpAttX;

		/// <summary>
		/// 
		/// </summary>
		public float KpAttY;

		/// <summary>
		/// 
		/// </summary>
		public float KpAttZ;

		/// <summary>
		/// 
		/// </summary>
		public float KdAttX;

		/// <summary>
		/// 
		/// </summary>
		public float KdAttY;

		/// <summary>
		/// 
		/// </summary>
		public float KdAttZ;

		/// <summary>
		/// 
		/// </summary>
		public float KiAttX;

		/// <summary>
		/// 
		/// </summary>
		public float KiAttY;

		/// <summary>
		/// 
		/// </summary>
		public float KiAttZ;

		/// <summary>
		/// 
		/// </summary>
		public float GE;

		/// <summary>
		/// 
		/// </summary>
		public float epsilon;

		/// <summary>
		/// 
		/// </summary>
		public float XY_Multiplier;

		/// <summary>
		/// 
		/// </summary>
		public float offset_x;

		/// <summary>
		/// 
		/// </summary>
		public float offset_y;

		/// <summary>
		/// 
		/// </summary>
		public float offset_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_UNIBO_PARAMETERS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Unibo references.
	/// </summary>
	public class Msg_unibo_references : MavlinkMessage
    {

		/// <summary>
		/// 
		/// </summary>
		public float p_refX;

		/// <summary>
		/// 
		/// </summary>
		public float p_refY;

		/// <summary>
		/// 
		/// </summary>
		public float p_refZ;

		/// <summary>
		/// 
		/// </summary>
		public float dot_p_refX;

		/// <summary>
		/// 
		/// </summary>
		public float dot_p_refY;

		/// <summary>
		/// 
		/// </summary>
		public float dot_p_refZ;

		/// <summary>
		/// 
		/// </summary>
		public float dot2_p_refX;

		/// <summary>
		/// 
		/// </summary>
		public float dot2_p_refY;

		/// <summary>
		/// 
		/// </summary>
		public float dot2_p_refZ;

		/// <summary>
		/// 
		/// </summary>
		public float psi_ref;

		/// <summary>
		/// 
		/// </summary>
		public float dot_psi_ref;

		/// <summary>
		/// 
		/// </summary>
		public float dot2_psi_ref;

		/// <summary>
		/// 
		/// </summary>
		public float q;

		/// <summary>
		/// 
		/// </summary>
		public UInt32 buttons;

		/// <summary>
		/// 
		/// </summary>
		public Int32 Tstamp;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_UNIBO_REFERENCES(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
	/// </summary>
	public class Msg_memory_vect : MavlinkMessage
    {

		/// <summary>
		/// Starting address of the debug variables
		/// </summary>
		public UInt16 address;

		/// <summary>
		/// Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below
		/// </summary>
		public byte ver;

		/// <summary>
		/// Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14
		/// </summary>
		public byte type;

		/// <summary>
		/// Memory contents at specified address
		/// </summary>
		public sbyte[] value; // Array size 32

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MEMORY_VECT(this, bytes, ref offset);
            }        
	}

	public class Msg_debug_vect : MavlinkMessage
    {
		public byte[] name; // Array size 10

		/// <summary>
		/// Timestamp
		/// </summary>
		public UInt64 time_usec;
		public float x;
		public float y;
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DEBUG_VECT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
	/// </summary>
	public class Msg_named_value_float : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Name of the debug variable
		/// </summary>
		public byte[] name; // Array size 10

		/// <summary>
		/// Floating point value
		/// </summary>
		public float value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_NAMED_VALUE_FLOAT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
	/// </summary>
	public class Msg_named_value_int : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Name of the debug variable
		/// </summary>
		public byte[] name; // Array size 10

		/// <summary>
		/// Signed integer value
		/// </summary>
		public Int32 value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_NAMED_VALUE_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
	/// </summary>
	public class Msg_statustext : MavlinkMessage
    {

		/// <summary>
		/// Severity of status. Relies on the definitions within RFC-5424. See enum MAV_SEVERITY.
		/// </summary>
		public byte severity;

		/// <summary>
		/// Status text message, without null termination character
		/// </summary>
		public byte[] text; // Array size 50

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_STATUSTEXT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
	/// </summary>
	public class Msg_debug : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// index of debug variable
		/// </summary>
		public byte ind;

		/// <summary>
		/// DEBUG value
		/// </summary>
		public float value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DEBUG(this, bytes, ref offset);
            }        
	}

}

